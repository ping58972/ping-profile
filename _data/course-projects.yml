- name: The Null Pointer and Other Tricks in XV6-OS
  url: ""
  client_code: ""
  server_code: https://github.com/ping58972/Metropolitan-State-University-All-Courses/tree/main/Operating_Systems-ICS%20462_02-Spring2021/Projects/ICS462/CODE/Project3
  description: Operating Systems --- ICS 462 Spring 2021 </br> XV6 Operating System Projects 3. </br>
              Part A - Null-pointer Dereference. </br>
              Part B - Stack Rearrangement.
  used:
    - thing: C
    - thing: XV6 OS
    - thing: Linux Ubuntu
    - thing: File System Management
    - thing: Memory Management

- name: File Sender and Receiver - Stop and Wait
  url: ""
  client_code: ""
  server_code: https://github.com/MSU-ICS460-01-Team03/project2-Team3
  description: Networks and Security  --- ICS 460 Fall 2021 </br> 
                Project 02 --- End to End networking program, implement by Java Socket, Datagram.</br>
                sends files to the receiver using UDP Socket.
  used:
    - thing: Java
    - thing: Socket
    - thing: UDP

- name: Data Sockets with Multi-thread
  url: ""
  client_code: ""
  server_code: https://github.com/ping58972/Metropolitan-State-University-All-Courses/tree/main/Parallel_and_Distributed_Algorithms-ICS440_01-Fall2021/publish
  description: Parallel and Distributed Algorithms --- ICS 440-01 Fall 2021 </br> 
               Creating multi-thread of self-running object to wait for client </br>
               requests to be sent up then send back the appropriate response.  </br>
               Use the writeUTF(String s) method on DataOutputStream to send a reqeust </br>
              (or a response) over the OutputStream of the Socket. </br>
              Use the readUTF() method on DataInputStream to receive a request (or a </br>
              response) from the InputStream of the Socket.
  used:
    - thing: Java
    - thing: Object Oriented Programming
    - thing: Mutiple Thread Programming
    - thing: Parallel Programming
    - thing: Thread Pools
    - thing: Dead Lock

- name: Distributed and Cloud Computing Course's Assignment
  url: ""
  client_code: ""
  server_code: https://github.com/ping58972/Metropolitan-State-University-All-Courses/tree/main/Distributed_and_Cloud_Computing-ICS432_01-Fall2021/publish
  description:  Distributed and Cloud Computing --- ICS 432 Fall 2021 Fall 2021 </br>
                Working with Cloud Virtual Machines - AWS EC2 instance, GCP Virtual Machine.</br>
                Load Balancing and Auto Scaling - Implementing a scalable AWS and GCP infrastructure.</br>
                MapReduce - Analyzing Stock Data, Implementing Relational Union and Intersection.</br>
                Docker in AWS and GCP with Python Flask.
  used:
    - thing: AWS
    - thing: AWS EC2
    - thing: AWS S3
    - thing: AWS EFS
    - thing: GCP 
    - thing: GCP Compute-Egnine
    - thing: GCP Cloud-SQL

- name: Grocery Store Application
  url: ""
  client_code: ""
  server_code: https://github.com/ICS-372-2-GroupProject/CoopGroceryStore
  description: Object Oriented Design and Implementation --- ICS 372_02 Spring 2021 </br> 
                This project was working within 5 members team. We designed the Document and
                 used OOP wiht Java to implement the Design Pattern for complete the project. </br>
                 A small co-op grocery store works by having members join it by paying a certain fee.
  used:
    - thing: Java
    - thing: Object Oriented Programming
    - thing: Adapter Design Pattern
    - thing: Facade Design Pattern
    - thing: Iterator Design Pattern
    - thing: Mediator Design Pattern
    - thing: State Design Pattern
    - thing: Visitor Design Pattern
    - thing: Command Design Pattern
    - thing: Observer Design Pattern

- name: Find Path Travel Cities Algorithm
  url: ""
  client_code: ""
  server_code: https://github.com/ping58972/Metropolitan-State-University-All-Courses/tree/main/Algorithms%20and%20Data%20Structures-ICS%20340_01-Spring2021/publish
  description: Algorithms and Data Structures --- ICS 340 Spring 2021  </br> Advance Algorithm Projects </br>
              Deliverable D - finding a good Ham cycle path by local search.</br>
              Deliverable C - From the starting city (val = “S”) use depth first search with iterative deepening to find the nearest goal city (val = “G”).</br>
              Deliverable B - program to find the shortest bitonic tour of the cities. The algorithm for the bitonic tour is well known.
  used:
    - thing: Java
    - thing: Local Search
    - thing: Bitonic Tour
    - thing: Deep First Search
    - thing: Breath First Search
    - thing: Ham cycle path

- name: Restuarant Database Management
  url: ""
  client_code: ""
  server_code: https://github.com/ping58972/Metropolitan-State-University-All-Courses/tree/main/Database_Magerment_Systems-ICS311-02-Fall2020/Publish
  description: Database Management Systems --- ICS 311 Fall 2020 </br> Database Implementation on MySQL by Java and JDBC. </br>
  used:
    - thing: Java Swing
    - thing: MySQL
    - thing: JDBC


